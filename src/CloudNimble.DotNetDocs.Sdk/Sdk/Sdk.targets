<Project>
    <!-- ============================================================================
        DotNetDocs.Sdk - Targets

        Provides build targets for documentation projects (.docsproj)
        Includes validation, generation, and integration targets.
        ============================================================================ -->

    <!-- Debug: Confirm targets file is loaded -->
    <Target Name="DotNetDocsTargetsLoaded" BeforeTargets="Build">
        <Message Text="🔧 DotNetDocs.Sdk targets loaded successfully" Importance="high" />
    </Target>

    <!-- Import the NoTargets SDK targets for no-compile behavior -->
    <!-- NoTargets SDK files are bundled in the Sdk/NoTargets folder -->
    <Import Project="$(MSBuildThisFileDirectory)NoTargets\Sdk.targets" />


    <!-- Debug: Show GenerateDocumentation property value -->
    <Target Name="DebugGenerateDocumentation" BeforeTargets="ValidateDocumentationProject">
        <Message Text="🔧 GenerateDocumentation property: '$(GenerateDocumentation)'" Importance="high" />
    </Target>

    <!-- Documentation project validation and information -->
    <Target Name="ValidateDocumentationProject" AfterTargets="Build">
        <Message Text="✅ Documentation project: $(MSBuildProjectName)" Importance="high" />
        <Message Text="📄 Documentation type: $(DocumentationType)" Importance="high" />
        <Message Text="📂 Documentation root: $(DocumentationRoot)" Importance="high" Condition="'$(DocumentationRoot)' != '$(MSBuildProjectDirectory)\'" />
        <Message Text="📁 Output redirected to: $(ApiReferencePath)" Importance="normal" Condition="'$(KeepLocalOutput)' != 'true'" />
        <Message Text="📁 Output kept local" Importance="normal" Condition="'$(KeepLocalOutput)' == 'true'" />
        <Message Text="🔧 Generate documentation: $(GenerateDocumentation)" Importance="normal" />
    </Target>

    <!-- Discover documented projects in solution for documentation generation -->
    <Target Name="DiscoverDocumentedProjects" Condition="'$(GenerateDocumentation)' == 'true'" BeforeTargets="ValidateDocumentationProject">
        <Message Text="🔍 Discovering documented projects in solution..." Importance="high" />

        <!-- Find all .csproj files in parent directory (sibling projects) -->
        <ItemGroup>
            <AllProjectFiles Include="$(MSBuildProjectDirectory)\..\**\*.csproj" />
            <!-- Exclude the docs project itself -->
            <AllProjectFiles Remove="$(MSBuildProjectDirectory)\..\$(MSBuildProjectName)\*.csproj" />
            <!-- Exclude test projects by pattern (projects can override with GenerateDotNetDocs property) -->
            <AllProjectFiles Remove="$(MSBuildProjectDirectory)\..\**\*.Tests.*\*.csproj" />
            <AllProjectFiles Remove="$(MSBuildProjectDirectory)\..\**\*.Test\*.csproj" />
        </ItemGroup>

        <Message Text="   Found @(AllProjectFiles->Count()) non-test project files" Importance="normal" />

        <!-- 
        For now, use pattern-based discovery with property override capability:
        - Include all non-test projects by default
        - Projects can opt-in with <GenerateDotNetDocs>true</GenerateDotNetDocs>
        - Projects can opt-out with <GenerateDotNetDocs>false</GenerateDotNetDocs> or <IsPackable>false</IsPackable>
        - In the future, we can enhance this with inline tasks when MSBuild support improves
        -->
        <ItemGroup>
            <DocumentedProjects Include="@(AllProjectFiles)" />
        </ItemGroup>

        <Message Text="📚 Found @(DocumentedProjects->Count()) documented projects for documentation" Importance="high" />
        
        <!-- Show the list of projects that will be documented -->
        <ItemGroup>
            <_ProjectNames Include="@(DocumentedProjects->'%(Filename)')" />
        </ItemGroup>
        <Message Text="   Projects: @(_ProjectNames, ', ')" Importance="normal" />
    </Target>

    <!-- Build discovered projects and generate documentation -->
    <Target Name="GenerateDocumentation"
            Condition="'$(GenerateDocumentation)' == 'true'"
            AfterTargets="Build"
            DependsOnTargets="DiscoverDocumentedProjects">
        <Message Text="🚀 Generating unified documentation from solution..." Importance="high" />

        <!-- Build all documented projects to ensure assemblies are up to date -->
        <MSBuild Projects="@(DocumentedProjects)"
                 Targets="Restore;Build"
                 ContinueOnError="false" />

        <Message Text="✅ Successfully built @(DocumentedProjects->Count()) projects" Importance="normal" />

        <!-- Extract assembly paths from built projects (only main project assemblies) -->
        <ItemGroup>
            <!-- Get assembly paths for net8.0 target framework - only main project assemblies -->
            <AssemblyPaths Include="%(DocumentedProjects.RootDir)%(DocumentedProjects.Directory)bin\Release\net8.0\%(DocumentedProjects.Filename).dll" />
            <XmlDocPaths Include="%(DocumentedProjects.RootDir)%(DocumentedProjects.Directory)bin\Release\net8.0\%(DocumentedProjects.Filename).xml" />
        </ItemGroup>

        <Message Text="📁 Found @(AssemblyPaths->Count()) assemblies for documentation generation" Importance="normal" />

        <!-- Call DocumentationManager to process assemblies -->
        <PropertyGroup>
            <DocumentationManagerAssembly>$(MSBuildThisFileDirectory)..\..\CloudNimble.DotNetDocs.Core\bin\Release\net8.0\CloudNimble.DotNetDocs.Core.dll</DocumentationManagerAssembly>
            <DocumentationRootPath>$(MSBuildProjectDirectory)</DocumentationRootPath>
            <DocumentationGeneratorTool>$(MSBuildThisFileDirectory)..\..\CloudNimble.DotNetDocs.Tools\bin\Release\net8.0\CloudNimble.DotNetDocs.Tools.dll</DocumentationGeneratorTool>
            <NamespaceModeProperty>$(NamespaceMode)</NamespaceModeProperty>
        </PropertyGroup>

        <!-- Create assembly list file for DocumentationManager -->
        <WriteLinesToFile File="$(MSBuildProjectDirectory)\assembly-list.txt"
                         Lines="@(AssemblyPaths)"
                         Overwrite="true"
                         Condition="'$(Configuration)' == 'Debug'" />

        <Message Text="📝 Created assembly list: $(MSBuildProjectDirectory)\assembly-list.txt" Importance="normal" />
        <Message Text="🔧 Calling DocumentationManager.ProcessAsync with @(AssemblyPaths->Count()) assemblies" Importance="high" />

        <!-- Call DocumentationManager via Tools project -->
        <Exec Command="dotnet run --project &quot;$(MSBuildThisFileDirectory)..\..\CloudNimble.DotNetDocs.Tools\CloudNimble.DotNetDocs.Tools.csproj&quot; --framework net8.0 -- &quot;$(MSBuildProjectDirectory)\assembly-list.txt&quot; &quot;$(DocumentationRootPath)&quot; &quot;$(NamespaceModeProperty)&quot; &quot;$(DocumentationType)&quot; &quot;$(ApiReferencePath)&quot;"
              ContinueOnError="true"
              WorkingDirectory="$(MSBuildProjectDirectory)">
            <Output TaskParameter="ExitCode" PropertyName="DocGenExitCode" />
        </Exec>

        <!-- Check result -->
        <Message Text="✅ Documentation generation completed (Exit Code: $(DocGenExitCode))" Importance="high" Condition="'$(DocGenExitCode)' == '0'" />
        <Message Text="❌ Documentation generation failed (Exit Code: $(DocGenExitCode))" Importance="high" Condition="'$(DocGenExitCode)' != '0'" />

        <!-- DocumentationManager integration complete - merged model processing enabled -->
    </Target>

    <!-- Optional: Mintlify integration -->
    <Target Name="GenerateMintlifyDocs"
            Condition="'$(GenerateMintlifyDocs)' == 'true' AND '$(DocumentationType)' == 'Mintlify'"
            AfterTargets="Build">
        <Message Text="🚀 Generating Mintlify documentation..." Importance="high" />

        <!-- TODO: Implement Mintlify documentation generation -->
        <Message Text="⚠️ Mintlify generation not yet implemented" Importance="normal" />
    </Target>

    <!-- Optional: Markdown linting -->
    <Target Name="LintMarkdown"
            Condition="'$(LintMarkdown)' == 'true'"
            AfterTargets="Build">
        <Message Text="🔍 Linting Markdown files..." Importance="high" />
        <Exec Command="markdownlint **/*.md"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="true" />
    </Target>

    <!-- Optional: Link validation -->
    <Target Name="ValidateLinks"
            Condition="'$(ValidateLinks)' == 'true'"
            AfterTargets="Build">
        <Message Text="🔗 Validating documentation links..." Importance="high" />
        <!-- This would require a custom tool or script -->
        <Message Text="Link validation not implemented yet - install markdown-link-check or similar tool" Importance="low" />
    </Target>

    <!-- Optional: Documentation preview -->
    <Target Name="PreviewDocumentation"
            Condition="'$(PreviewDocumentation)' == 'true'"
            AfterTargets="Build">
        <Message Text="👀 Starting documentation preview..." Importance="high" />

        <!-- Mintlify preview -->
        <Exec Command="mint dev"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="true"
              Condition="'$(DocumentationType)' == 'Mintlify'" />

        <!-- DocFX preview -->
        <Exec Command="docfx --serve"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="true"
              Condition="'$(DocumentationType)' == 'DocFX'" />

        <!-- MkDocs preview -->
        <Exec Command="mkdocs serve"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="true"
              Condition="'$(DocumentationType)' == 'MkDocs'" />

        <!-- Jekyll preview -->
        <Exec Command="bundle exec jekyll serve"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="true"
              Condition="'$(DocumentationType)' == 'Jekyll'" />

        <!-- Hugo preview -->
        <Exec Command="hugo server"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="true"
              Condition="'$(DocumentationType)' == 'Hugo'" />
    </Target>

    <!-- Optional: Generate PDF documentation -->
    <Target Name="GeneratePdf"
            Condition="'$(GeneratePdf)' == 'true'"
            AfterTargets="Build">
        <Message Text="📄 Generating PDF documentation..." Importance="high" />
        <!-- This would require pandoc or similar tool -->
        <Message Text="PDF generation not implemented yet - install pandoc or similar tool" Importance="low" />
    </Target>

    <!-- Optional: Documentation deployment -->
    <Target Name="DeployDocumentation"
            Condition="'$(DeployDocumentation)' == 'true'"
            AfterTargets="Build">
        <Message Text="🚀 Deploying documentation..." Importance="high" />

        <!-- Mintlify deployment -->
        <Exec Command="mint deploy"
              WorkingDirectory="$(DocumentationRoot)"
              ContinueOnError="true"
              IgnoreExitCode="false"
              Condition="'$(DocumentationType)' == 'Mintlify'" />

        <!-- GitHub Pages deployment (generic) -->
        <Message Text="Configure GitHub Actions or other CI/CD for deployment"
                 Importance="normal"
                 Condition="'$(DocumentationType)' != 'Mintlify'" />
    </Target>

    <!-- Documentation project statistics -->
    <Target Name="DocumentationStats"
            Condition="'$(ShowDocumentationStats)' == 'true'"
            AfterTargets="Build">
        <Message Text="📊 Documentation Statistics:" Importance="high" />

        <ItemGroup>
            <MarkdownFiles Include="$(DocumentationRoot)**/*.md" />
            <MarkdownFiles Include="$(DocumentationRoot)**/*.mdx" />
            <MarkdownFiles Include="$(DocumentationRoot)**/*.mdz" />
            <ImageFiles Include="$(DocumentationRoot)**/*.png;$(DocumentationRoot)**/*.jpg;$(DocumentationRoot)**/*.jpeg;$(DocumentationRoot)**/*.gif;$(DocumentationRoot)**/*.svg" />
        </ItemGroup>

        <Message Text="   📄 Documentation type: $(DocumentationType)" Importance="high" />
        <Message Text="   📝 Markdown files: @(MarkdownFiles->Count())" Importance="high" />
        <Message Text="   🖼️ Image files: @(ImageFiles->Count())" Importance="high" />
    </Target>



    <!-- Help target to show available options -->
    <Target Name="DocumentationHelp">
        <Message Text="" Importance="high" />
        <Message Text="📚 DotNetDocs.Sdk Help" Importance="high" />
        <Message Text="═══════════════════════════════" Importance="high" />
        <Message Text="" Importance="high" />
        <Message Text="Available Properties:" Importance="high" />
        <Message Text="  KeepLocalOutput=true          - Keep bin/obj in project folder" Importance="high" />
        <Message Text="  GenerateDocumentation=true    - Generate docs from all packable projects in solution" Importance="high" />
        <Message Text="  GenerateMintlifyDocs=true     - Auto-generate Mintlify docs on build" Importance="high" />
        <Message Text="  LintMarkdown=true             - Lint markdown files on build" Importance="high" />
        <Message Text="  ValidateLinks=true            - Validate links on build" Importance="high" />
        <Message Text="  PreviewDocumentation=true     - Start preview server on build" Importance="high" />
        <Message Text="  ShowDocumentationStats=true   - Show documentation statistics" Importance="high" />
        <Message Text="  GeneratePdf=true              - Generate PDF output" Importance="high" />
        <Message Text="  DeployDocumentation=true      - Deploy documentation after build" Importance="high" />
        <Message Text="" Importance="high" />
        <Message Text="Available Targets:" Importance="high" />
        <Message Text="  dotnet build -t:DocumentationHelp       - Show this help" Importance="high" />
        <Message Text="  dotnet build -t:DocumentationStats      - Show documentation statistics" Importance="high" />
        <Message Text="  dotnet build -t:GenerateDocumentation    - Generate unified documentation" Importance="high" />
        <Message Text="  dotnet build -t:GenerateMintlifyDocs     - Generate Mintlify documentation" Importance="high" />
        <Message Text="  dotnet build -t:LintMarkdown             - Lint markdown files" Importance="high" />
        <Message Text="  dotnet build -t:PreviewDocumentation     - Start preview server" Importance="high" />
        <Message Text="" Importance="high" />
        <Message Text="Current Configuration:" Importance="high" />
        <Message Text="  Documentation Type: $(DocumentationType)" Importance="high" />
        <Message Text="  Documentation Root: $(DocumentationRoot)" Importance="high" />
        <Message Text="  Output Location: $(ApiReferencePath)" Importance="high" />
        <Message Text="  Keep Local Output: $(KeepLocalOutput)" Importance="high" />
        <Message Text="  Generate Documentation: $(GenerateDocumentation)" Importance="high" />
        <Message Text="" Importance="high" />
    </Target>

</Project>
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <!-- SDK packages don't compile code -->
        <TargetFrameworks>net8.0;net472</TargetFrameworks>
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <Description>The MSBuild SDK for documentation projects (.docsproj) that provides a clean way to include documentation in .NET solutions.</Description>

        <!-- This is an MSBuild SDK package -->
        <DevelopmentDependency>true</DevelopmentDependency>
        <PackageType>MSBuildSdk</PackageType>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
        <IncludeBuildOutput>false</IncludeBuildOutput>

        <!-- Suppress warnings about SDK packages -->
        <NoWarn>$(NoWarn);NU5128;CS2008;NU1701;NU5100</NoWarn>
        
        <!-- Don't create symbols package for SDK projects -->
        <IncludeSymbols>false</IncludeSymbols>
        
        <!-- Suppress dependencies when packing -->
        <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);AddPerTFMDocsTasksToPackage</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <ItemGroup>
        <!-- MSBuild task dependencies -->
        <PackageReference Include="EasyAF.MSBuild" Version="3.*-*" />
        <PackageReference Include="Microsoft.Build.Framework" Version="17.*" PrivateAssets="all" />
        <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.*" PrivateAssets="all" ExcludeAssets="runtime" />
        <PackageReference Include="System.Collections.Immutable" Version="9.*" PrivateAssets="all" />
        
        <!-- Microsoft.CodeAnalysis.CSharp.Workspaces needs to be available for the task -->
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.*" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net8.0'">
        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.*" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net472'">
        <PackageReference Include="System.ValueTuple" Version="4.*" />
    </ItemGroup>

    <!-- Project references for .NET Core/5+ only -->
    <ItemGroup Condition="'$(TargetFramework)' != 'net472'">
        <ProjectReference Include="..\CloudNimble.DotNetDocs.Core\CloudNimble.DotNetDocs.Core.csproj" />
        <ProjectReference Include="..\CloudNimble.DotNetDocs.Mintlify\CloudNimble.DotNetDocs.Mintlify.csproj" />
    </ItemGroup>

    <ItemGroup>
        <!-- Pack the SDK files -->
        <None Include="Sdk\**" Pack="true" PackagePath="Sdk" />
        <None Include="build\**" Pack="true" PackagePath="build" />
    </ItemGroup>

    <!-- This is called for each TFM of this project - so we should be able to ask ourselves what our own outputs are -->
    <Target Name="AddPerTFMDocsTasksToPackage" Returns="@(TfmSpecificPackageFile)" DependsOnTargets="ResolveProjectReferences">
        <PropertyGroup>
            <_TargetsForReferenceOutputs>ReferenceCopyLocalPathsOutputGroup;BuiltProjectOutputGroup</_TargetsForReferenceOutputs>
        </PropertyGroup>
        <!-- for each of our TFMs, we need to get a few kinds of outputs and put them into the package -->
        <MSBuild Projects="$(MSBuildThisFileFullPath)" 
            Targets="$(_TargetsForReferenceOutputs)">
            <Output TaskParameter="TargetOutputs" ItemName="CurrentTFMOutputs" />
        </MSBuild>
        
        <ItemGroup>
            <CurrentTFMOutputs Update="@(CurrentTFMOutputs)" PackagePath="tasks\$(TargetFramework)\$([MSBuild]::ValueOrDefault('%(CurrentTFMOutputs.DestinationSubPath)', '%(CurrentTFMOutputs.TargetPath)'))" />
            <TfmSpecificPackageFile Include="@(CurrentTFMOutputs)" />
        </ItemGroup>
    </Target>

    <!-- Automatically push SDK package to local feed after pack -->
    <Target Name="PushToLocalFeed" AfterTargets="Pack" Condition="'$(Configuration)' == 'Release' or '$(Configuration)' == 'Debug'">
        <PropertyGroup>
            <!-- Use LOCAL_NUGET_FEED env var if set, otherwise use default local path -->
            <LocalFeedPath Condition="'$(LOCAL_NUGET_FEED)' != ''">$([System.IO.Path]::GetFullPath('$(LOCAL_NUGET_FEED)'))</LocalFeedPath>
            <LocalFeedPath Condition="'$(LOCAL_NUGET_FEED)' == ''">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\..\local-nuget-feed'))</LocalFeedPath>
            <PackageOutputPath>$(MSBuildProjectDirectory)\bin\$(Configuration)\$(PackageId).$(PackageVersion).nupkg</PackageOutputPath>
        </PropertyGroup>
        
        <!-- Create local feed directory if it doesn't exist -->
        <MakeDir Directories="$(LocalFeedPath)" />
        
        <!-- Push the package to local feed -->
        <Exec Command="dotnet nuget push &quot;$(PackageOutputPath)&quot; --source &quot;$(LocalFeedPath)&quot; --skip-duplicate"
              ContinueOnError="true"
              ConsoleToMSBuild="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        
        <Message Text="📦 Pushed $(PackageId).$(PackageVersion) to local feed at $(LocalFeedPath)" Importance="high" Condition="'$(ErrorCode)' == '0'" />
        <Message Text="⚠️ Package already exists in local feed or push failed (this is OK for local development)" Importance="normal" Condition="'$(ErrorCode)' != '0'" />
    </Target>
</Project>
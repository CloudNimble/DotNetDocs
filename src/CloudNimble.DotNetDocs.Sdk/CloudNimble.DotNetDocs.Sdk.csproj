<Project Sdk="Microsoft.Build.NoTargets/3.7.0">

    <PropertyGroup>
        <!-- SDK packages don't compile code -->
        <TargetFramework>netstandard2.0</TargetFramework>
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <Description>The MSBuild SDK for documentation projects (.docsproj) that provides a clean way to include documentation in .NET solutions.</Description>

        <!-- This is an MSBuild SDK package -->
        <DevelopmentDependency>true</DevelopmentDependency>
        <PackageType>MSBuildSdk</PackageType>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

        <!-- Suppress warnings about SDK packages -->
        <NoWarn>$(NoWarn);NU5128;CS2008;NU1701;NU5100</NoWarn>
        
        <!-- Don't create symbols package for SDK projects -->
        <IncludeSymbols>false</IncludeSymbols>
        
        <!-- Suppress dependencies when packing -->
        <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);AddDocsTasksToPackage</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj"
            SetTargetFramework="TargetFramework=net472"
            ReferenceOutputAssembly="false" />
        <ProjectReference Include="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj"
            SetTargetFramework="TargetFramework=net8.0"
            ReferenceOutputAssembly="false" />
        <ProjectReference Include="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj"
            SetTargetFramework="TargetFramework=net9.0"
            ReferenceOutputAssembly="false" />
        <ProjectReference Include="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj"
            SetTargetFramework="TargetFramework=net10.0"
            ReferenceOutputAssembly="false" />
    </ItemGroup>

    <ItemGroup>
        <!-- Pack the SDK files -->
        <None Include="Sdk\**" Pack="true" PackagePath="Sdk" />
        <None Include="build\**" Pack="true" PackagePath="build" />
    </ItemGroup>

    <Target Name="AddDocsTasksToPackage" Returns="@(TfmSpecificPackageFile)" DependsOnTargets="ResolveProjectReferences">
        <PropertyGroup>
            <_TargetsForReferenceOutputs>ReferenceCopyLocalPathsOutputGroup;BuiltProjectOutputGroup</_TargetsForReferenceOutputs>
        </PropertyGroup>
        <!-- for each of our TFMs, we need to get a few kinds of outputs and put them into the package -->
        <MSBuild Projects="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj" 
            Targets="$(_TargetsForReferenceOutputs)" 
            BuildInParallel="true"
            Properties="TargetFramework=net472">
            <Output TaskParameter="TargetOutputs" ItemName="Net472Outputs" />
        </MSBuild>
        <MSBuild Projects="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj" 
            Targets="$(_TargetsForReferenceOutputs)" 
            BuildInParallel="true"
            Properties="TargetFramework=net8.0">
            <Output TaskParameter="TargetOutputs" ItemName="Net8Outputs" />
        </MSBuild>
        <MSBuild Projects="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj" 
            Targets="$(_TargetsForReferenceOutputs)" 
            BuildInParallel="true"
            Properties="TargetFramework=net9.0">
            <Output TaskParameter="TargetOutputs" ItemName="Net9Outputs" />
        </MSBuild>
        <MSBuild Projects="..\CloudNimble.DotNetDocs.Sdk.Tasks\CloudNimble.DotNetDocs.Sdk.Tasks.csproj" 
            Targets="$(_TargetsForReferenceOutputs)" 
            BuildInParallel="true"
            Properties="TargetFramework=net10.0">
            <Output TaskParameter="TargetOutputs" ItemName="Net10Outputs" />
        </MSBuild>

        <ItemGroup>
            <Net472Outputs Update="@(Net472Outputs)" PackagePath="tasks\net472\$([MSBuild]::ValueOrDefault('%(Net472Outputs.DestinationSubPath)', '%(Net472Outputs.TargetPath)'))" />
            <Net8Outputs Update="@(Net8Outputs)" PackagePath="tasks\net8.0\$([MSBuild]::ValueOrDefault('%(Net8Outputs.DestinationSubPath)', '%(Net8Outputs.TargetPath)'))" />
            <Net9Outputs Update="@(Net9Outputs)" PackagePath="tasks\net9.0\$([MSBuild]::ValueOrDefault('%(Net9Outputs.DestinationSubPath)', '%(Net9Outputs.TargetPath)'))" />
            <Net10Outputs Update="@(Net10Outputs)" PackagePath="tasks\net10.0\$([MSBuild]::ValueOrDefault('%(Net10Outputs.DestinationSubPath)', '%(Net10Outputs.TargetPath)'))" />

            <TfmSpecificPackageFile Include="@(Net472Outputs)" />
            <TfmSpecificPackageFile Include="@(Net8Outputs)" />
            <TfmSpecificPackageFile Include="@(Net9Outputs)" />
            <TfmSpecificPackageFile Include="@(Net10Outputs)" />
        </ItemGroup>
    </Target>

    <!-- Automatically push SDK package to local feed after pack -->
    <Target Name="PushToLocalFeed" AfterTargets="Pack" Condition="'$(Configuration)' == 'Release' or '$(Configuration)' == 'Debug'">
        <PropertyGroup>
            <!-- Use LOCAL_NUGET_FEED env var if set, otherwise use default local path -->
            <LocalFeedPath Condition="'$(LOCAL_NUGET_FEED)' != ''">$([System.IO.Path]::GetFullPath('$(LOCAL_NUGET_FEED)'))</LocalFeedPath>
            <LocalFeedPath Condition="'$(LOCAL_NUGET_FEED)' == ''">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\..\local-nuget-feed'))</LocalFeedPath>
            <PackageOutputPath>$(MSBuildProjectDirectory)\bin\$(Configuration)\$(PackageId).$(PackageVersion).nupkg</PackageOutputPath>
        </PropertyGroup>
        
        <!-- Create local feed directory if it doesn't exist -->
        <MakeDir Directories="$(LocalFeedPath)" />
        
        <!-- Push the package to local feed -->
        <Exec Command="dotnet nuget push &quot;$(PackageOutputPath)&quot; --source &quot;$(LocalFeedPath)&quot; --skip-duplicate"
              ContinueOnError="true"
              ConsoleToMSBuild="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        
        <Message Text="📦 Pushed $(PackageId).$(PackageVersion) to local feed at $(LocalFeedPath)" Importance="high" Condition="'$(ErrorCode)' == '0'" />
        <Message Text="⚠️ Package already exists in local feed or push failed (this is OK for local development)" Importance="normal" Condition="'$(ErrorCode)' != '0'" />
    </Target>
</Project>
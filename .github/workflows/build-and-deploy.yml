name: Build and Deploy to NuGet

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      deploy_to_nuget:
        description: 'Deploy to NuGet'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  actions: write

env:
   DOTNET_VERSION: '10.0.x'
   SOLUTION_FILE: 'src/CloudNimble.DotNetDocs.slnx'
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning

    - name: Install .NET versions
      shell: pwsh
      run: |
         Write-Host "📥 Installing .NET versions..."
         # Install .NET 8, 9, 10
         $versions = @("8.0", "9.0", "10.0")
         foreach ($version in $versions) {
           Write-Host "Installing .NET $version..."
           Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile "dotnet-install.ps1"
           if ($version -eq "10.0") {
             ./dotnet-install.ps1 -Channel $version -Quality preview -InstallDir "$env:ProgramFiles\dotnet"
           } else {
             ./dotnet-install.ps1 -Channel $version -InstallDir "$env:ProgramFiles\dotnet"
           }
         }
         
         # Add to PATH for this job
         echo "$env:ProgramFiles\dotnet" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
         
         # Verify installation
         dotnet --list-sdks

    - name: Get version variables
      id: version
      shell: pwsh
      run: |
        # Get version components from repository variables
        $majorVersion = "${{ vars.VERSION_MAJOR }}"
        if ([string]::IsNullOrEmpty($majorVersion)) { $majorVersion = "1" }
        
        $minorVersion = "${{ vars.VERSION_MINOR }}"
        if ([string]::IsNullOrEmpty($minorVersion)) { $minorVersion = "0" }
        
        $previewSuffix = "${{ vars.VERSION_PREVIEW_SUFFIX }}"
        if ([string]::IsNullOrEmpty($previewSuffix)) { $previewSuffix = "0" }
        
        Write-Host "🔢 Version variables: MAJOR=$majorVersion, MINOR=$minorVersion, PREVIEW_SUFFIX=$previewSuffix"
        
        # Determine version based on branch
        $ref = "${{ github.ref }}"
        if ($ref -eq "refs/heads/main") {
          # Main branch: look at git tags to find the highest patch version
          Write-Host "🏷️ Main branch: fetching tags for patch version calculation..."
          git fetch --tags --force
          
          $currentMajorMinor = "$majorVersion.$minorVersion"
          $tags = git tag -l "v$currentMajorMinor.*" --sort=-version:refname
          $tagList = $tags -join ', '
          Write-Host "📋 Found tags for $currentMajorMinor`: $tagList"
          
          $patchVersion = 0
          if ($tags -and $tags.Count -gt 0) {
            foreach ($tag in $tags) {
              if ($tag -match "^v$majorVersion\.$minorVersion\.(\d+)$") {
                $patch = [int]$matches[1]
                if ($patch -gt $patchVersion) { $patchVersion = $patch }
              }
            }
            $patchVersion = $patchVersion + 1
          }
          
          $version = "$majorVersion.$minorVersion.$patchVersion"
          $buildNumber = $patchVersion
          Write-Host "✅ Main branch version: $version"
        }
        elseif ($ref -eq "refs/heads/dev") {
          # Dev branch: use preview versioning with incremented suffix
          $nextPreviewSuffix = [int]$previewSuffix + 1
          $version = "$majorVersion.$minorVersion.0-preview.$nextPreviewSuffix"
          $buildNumber = 0
          
          # Store the next preview suffix for later update
          echo "NEXT_PREVIEW_SUFFIX=$nextPreviewSuffix" >> $env:GITHUB_OUTPUT
          Write-Host "✅ Dev branch version: $version (next suffix will be $nextPreviewSuffix)"
        }
        else {
          # Other branches (features/PRs): use CI versioning with timestamp
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss" -AsUTC
          $version = "$majorVersion.$minorVersion.0-CI-$timestamp"
          $buildNumber = 0
          Write-Host "✅ Feature branch version: $version"
        }
        
        # Output variables
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "MAJOR_VERSION=$majorVersion" >> $env:GITHUB_OUTPUT
        echo "MINOR_VERSION=$minorVersion" >> $env:GITHUB_OUTPUT
        echo "BUILD_NUMBER=$buildNumber" >> $env:GITHUB_OUTPUT
        echo "BRANCH_TYPE=$(if ($ref -eq 'refs/heads/main') { 'main' } elseif ($ref -eq 'refs/heads/dev') { 'dev' } else { 'feature' })" >> $env:GITHUB_OUTPUT
        
        Write-Host "📦 Final version: $version"

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build solution (first pass - no docs)
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore /p:Version=${{ steps.version.outputs.VERSION }}

    - name: Generate documentation (second pass - now SDK assembly exists)
      run: dotnet build src/CloudNimble.DotNetDocs.Docs/CloudNimble.DotNetDocs.Docs.csproj --configuration Release --no-restore

    - name: Test
      working-directory: src
      run: dotnet test --configuration Release --no-build

    - name: Pack
      run: dotnet pack ${{ env.SOLUTION_FILE }} --configuration Release --no-build --output ./artifacts /p:PackageVersion=${{ steps.version.outputs.VERSION }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg
        retention-days: 7

  deploy:
    needs: build
    runs-on: windows-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_nuget == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Get version data from build
      id: version
      shell: pwsh
      run: |
        # Re-calculate version data for this job (since we can't pass complex data between jobs)
        $majorVersion = "${{ vars.VERSION_MAJOR }}"
        if ([string]::IsNullOrEmpty($majorVersion)) { $majorVersion = "1" }
        
        $minorVersion = "${{ vars.VERSION_MINOR }}"
        if ([string]::IsNullOrEmpty($minorVersion)) { $minorVersion = "0" }
        
        $previewSuffix = "${{ vars.VERSION_PREVIEW_SUFFIX }}"
        if ([string]::IsNullOrEmpty($previewSuffix)) { $previewSuffix = "0" }
        
        $ref = "${{ github.ref }}"
        if ($ref -eq "refs/heads/dev") {
          $nextPreviewSuffix = [int]$previewSuffix + 1
          echo "NEXT_PREVIEW_SUFFIX=$nextPreviewSuffix" >> $env:GITHUB_OUTPUT
          echo "BRANCH_TYPE=dev" >> $env:GITHUB_OUTPUT
        } else {
          echo "BRANCH_TYPE=main" >> $env:GITHUB_OUTPUT
        }

    - name: Install .NET versions
      shell: pwsh
      run: |
         Write-Host "📥 Installing .NET versions..."
         # Install .NET 8, 9, 10
         $versions = @("8.0", "9.0", "10.0")
         foreach ($version in $versions) {
           Write-Host "Installing .NET $version..."
           Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile "dotnet-install.ps1"
           if ($version -eq "10.0") {
             ./dotnet-install.ps1 -Channel $version -Quality preview -InstallDir "$env:ProgramFiles\dotnet"
           } else {
             ./dotnet-install.ps1 -Channel $version -InstallDir "$env:ProgramFiles\dotnet"
           }
         }
         
         # Add to PATH for this job
         echo "$env:ProgramFiles\dotnet" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Push to NuGet
      id: nuget_push
      shell: pwsh
      run: |
        $deploymentSuccess = $true
        $errorMessage = ""
        
        Get-ChildItem ./artifacts/*.nupkg | ForEach-Object {
          Write-Host "📤 Pushing $($_.Name) to NuGet..."
          try {
            $result = dotnet nuget push $_.FullName `
              --api-key ${{ secrets.NUGET_API_KEY }} `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate 2>&1
            
            Write-Host "✅ Push result: $result"
            
            # Check for specific error patterns
            if ($result -match "error.*unauthorized|invalid.*api.*key|403") {
              $deploymentSuccess = $false
              $errorMessage = "Authentication failed - invalid API key"
              Write-Host "❌ $errorMessage"
            }
            elseif ($result -match "error.*conflict|409|already exists") {
              Write-Host "⚠️ Package version already exists, continuing..."
            }
            elseif ($result -match "error") {
              $deploymentSuccess = $false
              $errorMessage = "Deployment failed: $result"
              Write-Host "❌ $errorMessage"
            }
          }
          catch {
            $deploymentSuccess = $false
            $errorMessage = "Exception during push: $($_.Exception.Message)"
            Write-Host "❌ $errorMessage"
          }
        }
        
        echo "DEPLOYMENT_SUCCESS=$deploymentSuccess" >> $env:GITHUB_OUTPUT
        echo "ERROR_MESSAGE=$errorMessage" >> $env:GITHUB_OUTPUT
        
        if (-not $deploymentSuccess) {
          Write-Host "💥 Deployment failed: $errorMessage"
          exit 1
        }

    - name: Update preview suffix (dev branch only)
      if: steps.version.outputs.BRANCH_TYPE == 'dev' && steps.nuget_push.outputs.DEPLOYMENT_SUCCESS == 'true'
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        $nextSuffix = "${{ steps.version.outputs.NEXT_PREVIEW_SUFFIX }}"
        Write-Host "🔄 Updating VERSION_PREVIEW_SUFFIX to $nextSuffix"
        
        try {
          gh variable set VERSION_PREVIEW_SUFFIX --body "$nextSuffix"
          Write-Host "✅ Successfully updated VERSION_PREVIEW_SUFFIX to $nextSuffix"
        }
        catch {
          Write-Host "⚠️ Failed to update VERSION_PREVIEW_SUFFIX: $($_.Exception.Message)"
          # Don't fail the build for this
        }

  create-release:
    needs: [build, deploy]
    runs-on: windows-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event.inputs.deploy_to_nuget == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Get version from build
      id: version
      shell: pwsh
      run: |
         # Extract version from package name (assuming all have same version)
         $packageFile = Get-ChildItem ./artifacts/*.nupkg | Select-Object -First 1
         $version = $packageFile.Name -replace '.*\.(.+?)\.nupkg', '$1'
         echo "VERSION=$version" >> $env:GITHUB_OUTPUT
         Write-Host "📦 Creating release for version: $version"

    - name: Create Release
      id: create_release
      shell: pwsh
      run: |
         $version = "${{ steps.version.outputs.VERSION }}"
         $packages = Get-ChildItem ./artifacts/*.nupkg | ForEach-Object { $_.Name -replace '\.nupkg$', '' }
         $packageList = ""
         foreach ($package in $packages) {
           $packageName = $package -replace "\.$version$", ""
           $packageList += "- [$packageName](https://www.nuget.org/packages/$packageName/$version)`n"
         }
         
         $body = @"
         ## CloudNimble.DotNetDocs v$version
         
         ### 📦 NuGet Packages
         $packageList
         
         ### 🚀 What's Changed
         See [full changelog](https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.PREVIOUS_VERSION }}...v$version)
         
         ### 📥 Installation
         ```xml
         <Project Sdk="DotNetDocs.Sdk/$version">
           <!-- That's it! -->
         </Project>
         ```
         
         ### 📦 Package Details
         This release includes the following NuGet packages:
         $packageList
         "@
         
         echo "RELEASE_BODY=$body" >> $env:GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
         tag_name: v${{ steps.version.outputs.VERSION }}
         name: Release v${{ steps.version.outputs.VERSION }}
         body: ${{ steps.create_release.outputs.RELEASE_BODY }}
         files: ./artifacts/*.nupkg
         draft: false
         prerelease: false